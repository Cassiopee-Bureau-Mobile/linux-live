#!/bin/bash
# Linux Live Kit version 7

export PATH=.:./tools:../tools:/usr/sbin:/usr/bin:/sbin:/bin:/

CHANGEDIR=$(dirname $(readlink -f $0))
echo "Changing current directory to $CHANGEDIR"
cd $CHANGEDIR
CWD="$(pwd)"

. ./config || exit 1
. ./livekitlib || exit 1

# only root can continue, because only root can read all files from your system
allow_only_root

# get USB device name
if [ "$1" = "" ]; then
   echo "Usage: $0 <device>"
   echo "Example: $0 /dev/sdb"
   exit 1
fi
USBDEV="$1"

# check if USB device exists
if [ ! -b "$USBDEV" ]; then
   echo "Device $USBDEV not found, aborting"
   exit 1
fi

# Configure the tabs
#
#
# copy unlockStorage script
#cp $CWD/setup/unlockStorage.sh /etc/unlockStorage.sh

# on edite les crontab pour le root
CMD_CRONTAB_0="@reboot mkdir /home"
CMD_CRONTAB_1="@reboot mount /dev/mapper/encrypted /home"
CMD_CRONTAB_2="@reboot chown -R $SUDO_USER:$SUDO_USER /home/$SUDO_USER"
crontab -l -u root > /a/temp_cron
cp /a/temp_cron /a/temp_cron.bak
echo -e "$CMD_CRONTAB_1" >> /a/temp_cron
echo -e "$CMD_CRONTAB_2" >> /a/temp_cron
crontab -u root /a/temp_cron

# on edite le cryptab
USB_UUID=$(ls -l /dev/disk/by-uuid/ | grep $( echo ${USBDEV}2 | sed 's/\/dev\///' ) | awk '{print $9}')
CMD_CRYPTAB_1="encrypted UUID=$USB_UUID none"
cp /etc/crypttab /a/temp_cryptab.bak
echo -e "$CMD_CRYPTAB_1" >> /etc/crypttab



# Build live kit
#
#
# check for mksquashfs with xz compression
if [ "$(mksquashfs 2>&1 | grep "Xdict-size")" = "" ]; then
   echo "mksquashfs not found or doesn't support -comp xz, aborting, no changes made"
   echo "you may consider installing squashfs-tools package"
   exit 1
fi

MKISOFS=$(which mkisofs)
if [ "$MKISOFS" = "" ]; then
   MKISOFS=$(which genisoimage)
fi
if [ "$MKISOFS" = "" ]; then
   echo "Cannot find mkisofs or genisoimage, stop"
   exit 3
fi

# build initramfs image
if [ "$SKIPINITRFS" = "" ]; then
   echo "Building initramfs image..."
   cd initramfs
   INITRAMFS=$(./initramfs_create)
   cd ..
fi

# create live kit filesystem (cpio archive)
rm -Rf "$LIVEKITDATA"
BOOT="$LIVEKITDATA"/"$LIVEKITNAME"/boot
mkdir -p "$BOOT"
mkdir -p "$BOOT"/../changes
mkdir -p "$BOOT"/../modules

if [ "$INITRAMFS" != "" ]; then
   mv "$INITRAMFS" $BOOT/initrfs.img
fi

# BIOS / MBR booting
cp -r bootfiles/* $BOOT
cat bootfiles/syslinux.cfg | sed -r "s:/boot/:/$LIVEKITNAME/boot/:" > $BOOT/syslinux.cfg
cat bootfiles/bootinst.bat | sed -r "s:/boot/:/$LIVEKITNAME/boot/:" | sed -r "s:\\\\boot\\\\:\\\\$LIVEKITNAME\\\\boot\\\\:" > $BOOT/bootinst.bat
cp $VMLINUZ $BOOT/ || exit

# UEFI booting
mkdir -p $BOOT/EFI/Boot
cp bootfiles/EFI/Boot/syslinux.efi $BOOT/EFI/Boot/bootx64.efi
cp bootfiles/EFI/Boot/{ldlinux.e64,menu.c32,libutil.c32,vesamenu.c32,libcom32.c32} $BOOT/EFI/Boot
cat $BOOT/syslinux.cfg | sed -r "s:/$LIVEKITNAME/boot/vesamenu:vesamenu:" > $BOOT/EFI/Boot/syslinux.cfg

# create compressed 01-core.sb
COREFS=""
for i in $MKMOD; do
   if [ -d /$i ]; then
      COREFS="$COREFS /$i"
   fi
done
if [ "$SKIPCOREMOD" = "" ]; then
   mksquashfs $COREFS $LIVEKITDATA/$LIVEKITNAME/01-core.$BEXT -comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || exit
fi

cd "$LIVEKITDATA"
ARCH=$(uname -m)
TARGET=/tmp

cat "$CWD/bootinfo.txt" | fgrep -v "#" | sed -r "s/mylinux/$LIVEKITNAME/" | sed -r "s/\$/\x0D/" > readme.txt

echo cd $LIVEKITDATA '&&' $MKISOFS -o "$TARGET/$LIVEKITNAME-$ARCH.iso" -v -J -R -D -A "$LIVEKITNAME" -V "$LIVEKITNAME" \
-no-emul-boot -boot-info-table -boot-load-size 4 \
-b "$LIVEKITNAME"/boot/isolinux.bin -c "$LIVEKITNAME"/boot/isolinux.boot . \
> $TARGET/gen_"$LIVEKITNAME"_iso.sh
chmod o+x $TARGET/gen_"$LIVEKITNAME"_iso.sh

echo cd $LIVEKITDATA '&&' zip -0 -r "$TARGET/$LIVEKITNAME-$ARCH.zip" '*' \
> $TARGET/gen_"$LIVEKITNAME"_zip.sh
chmod o+x $TARGET/gen_"$LIVEKITNAME"_zip.sh

echo "-----------------------------"
echo "Finished. All data are in $LIVEKITDATA"
#echo "To build ISO, run: $TARGET/gen_"$LIVEKITNAME"_iso.sh"
#echo "To build ZIP, run: $TARGET/gen_"$LIVEKITNAME"_zip.sh"
cd $CWD

# reset the tabs configurations
crontab -u root /a/temp_cron.bak
rm /a/temp_cron

# reset the cryptab
cp /a/temp_cryptab.bak /etc/crypttab 


# create USB device and export build
# 
#
# format USB device
echo "-----------------------------"
echo "Formatting $USBDEV..."

if [ $(findmnt -l | grep $USBDEV) != "" ]; then
   echo "Umouting all partitons for $USBDEV..."
   umount $USBDEV*
fi

# Supprimer toutes les partitions existantes sur la clé USB
echo "Suppression des partitions existantes..."
sudo parted $USBDEV mklabel gpt

# Créer la deuxième partition de taille (HOME_SIZE) en ext4
echo "Création de la deuxième partition ($HOME_SIZE) en ext4..."
sudo parted -a optimal $USBDEV mkpart primary ext4 100MiB $(echo $HOME_SIZE)MiB

# Créer la troisième partition pour l'espace restant en ext4
echo "Création de la troisième partition en ext4..."
sudo parted -a optimal $USBDEV mkpart primary ext4 $HOME_SIZE 100%

# Mettre à jour la table de partitions
sudo partprobe $USBDEV

# Formater les partitions
echo "Formatage de la première partition en FAT32..."
sudo mkfs.fat -F32 ${USBDEV}1

echo "Formatage de la deuxième partition en ext4..."
sudo mkfs.ext4 ${USBDEV}2

echo "Formatage de la troisième partition en ext4..."
sudo mkfs.ext4 ${USBDEV}3

echo "Terminé !"
echo "-----------------------------"

# create Luks partition
echo "Création de la partition chiffrée..."
cryptsetup luksFormat ${USBDEV}2
cryptsetup open ${USBDEV}2 encrypted2
mkfs.ext4 /dev/mapper/encrypted2
mkdir /mnt/encrypted2
mount -t ext4 /dev/mapper/encrypted2 /mnt/encrypted2

# copy home directory to the encrypted partition
echo "Copie du répertoire home vers la partition chiffrée..."
cp -r /home/$SUDO_USER /mnt/encrypted2

# copy live kit to the USB device
echo "Copying live kit to ${USBDEV}3..."
mkdir /mnt/sys_files
mount ${USBDEV}3 /mnt/sys_files
cp -r $LIVEKITDATA/$LIVEKITNAME /mnt/sys_files

# build the bootfiles in the USB device
mkdir /mnt/boot
mount ${USBDEV}1 /mnt/boot
cd /mnt/sys_files/$LIVEKITNAME/bootfiles
./bootinst.sh

# copy the bootfiles to the USB boot partition
cp -r /mnt/sys_files/EFI /mnt/boot

echo "Terminé !"
echo "-----------------------------"
echo ""
echo "Le système est prêt à être utilisé."
echo "Ejectez la clé USB et démarrez votre ordinateur dessus."